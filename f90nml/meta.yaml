{% set name = "f90nml" %}
{% set version = "1.0.2" %}
{% set file_ext = "tar.gz" %}
{% set hash_type = "sha256" %}
{% set hash_value = "cfebfc34dd8969b1a9424363407ca7915481f47377819b204eaa08140fd4e7bb" %}

package:
  name: '{{ name|lower }}'
  version: '{{ version }}'

source:
  fn: '{{ name }}-{{ version }}.{{ file_ext }}'
  url: https://pypi.io/packages/source/{{ name[0] }}/{{ name }}/{{ name }}-{{ version }}.{{ file_ext }}
  '{{ hash_type }}': '{{ hash_value }}'

build:
  number: 0
  script: python setup.py install --single-version-externally-managed --record=record.txt

requirements:
  host:
    - python
    - setuptools
  run:
    - python

test:
  imports:
    - f90nml

about:
  home: http://github.com/marshallward/f90nml
  license: Apache Software License
  license_family: APACHE
  license_file: ''
  summary: Fortran 90 namelist parser
  description: "=========================================================\nf90nml - A Fortran namelist parser, generator, and editor\n=========================================================\n\nA Python\
    \ module and command line tool for parsing Fortran namelist files\n\n.. image:: https://travis-ci.org/marshallward/f90nml.svg?branch=master\n    :target: https://travis-ci.org/marshallward/f90nml\n\n\
    .. image:: https://ci.appveyor.com/api/projects/status/bcugyoqxiyyvemy8?svg=true\n   :target: https://ci.appveyor.com/project/marshallward/f90nml\n\n.. image:: https://coveralls.io/repos/marshallward/f90nml/badge.svg?branch=master\n\
    \   :target: https://coveralls.io/r/marshallward/f90nml?branch=master\n\n.. image:: https://zenodo.org/badge/DOI/10.5281/zenodo.1112518.svg\n   :target: https://doi.org/10.5281/zenodo.1112518\n\nDocumentation:\
    \ http://f90nml.readthedocs.org/en/latest/\n\n\nAbout f90nml\n============\n\n``f90nml`` is a Python module and command line tool that provides a simple\ninterface for the reading, writing, and modifying\
    \ Fortran namelist files.\n\nA namelist file is parsed and converted into an ``Namelist`` object, which\nbehaves like a standard Python ``dict``.  Values are converted from Fortran\ndata types to equivalent\
    \ primitive Python types.\n\nThe command line tool ``f90nml`` can be used to modify individual values inside\nof a shell environment.  It can also be used to convert the data between\nnamelists and\
    \ other configuration formats.  JSON and YAML formats are currently\nsupported.\n\n\nQuick usage guide\n=================\n\nTo read a namelist file ``sample.nml`` which contains the following namelists:\n\
    \n.. code-block:: fortran\n\n   &config_nml\n      input = 'wind.nc'\n      steps = 864\n      layout = 8, 16\n      visc = 1.0e-4\n      use_biharmonic = .false.\n   /\n\nwe would use the following\
    \ script:\n\n.. code:: python\n\n   import f90nml\n   nml = f90nml.read('sample.nml')\n\nwhich would would point ``nml`` to the following ``dict``:\n\n.. code:: python\n\n   nml = {\n       'config_nml':\
    \ {\n           'input': 'wind.nc',\n           'steps': 864,\n           'layout': [8, 16],\n           'visc': 0.0001,\n           'use_biharmonic': False\n       }\n   }\n\nFile objects can also\
    \ be used as inputs:\n\n.. code:: python\n\n   with open('sample.nml') as nml_file:\n       nml = f90nml.read(nml_file)\n\nTo modify one of the values, say ``steps``, and save the output, just\nmanipulate\
    \ the ``nml`` contents and write to disk using the ``write`` function:\n\n.. code:: python\n\n   nml['config_nml']['steps'] = 432\n   nml.write('new_sample.nml')\n\nNamelists can also be saved to file\
    \ objects:\n\n.. code:: python\n\n   with open('target.nml') as nml_file:\n      nml.write(nml_file)\n\nTo modify a namelist but preserve its comments and formatting, create a\nnamelist patch and apply\
    \ it to a target file using the ``patch`` function:\n\n.. code:: python\n\n   patch_nml = {'config_nml': {'visc': 1e-6}}\n   f90nml.patch('sample.nml', patch_nml, 'new_sample.nml')\n\n\nCommand line\
    \ interface\n----------------------\n\nA command line tool is provided to manipulate namelist files within the shell:\n\n.. code:: sh\n\n   $ f90nml config.nml -g config_nml -v steps=432\n\n.. code-block::\
    \ fortran\n\n   &config_nml\n      input = 'wind.nc'\n      steps = 432\n      layout = 8, 16\n      visc = 1.0e-4\n      use_biharmonic = .false.\n   /\n\nSee the documentation for details.\n\n\nInstallation\n\
    ============\n\n``f90nml`` is available on PyPI and can be installed via pip::\n\n   $ pip install f90nml\n\nIt is also available on Arch Linux via the AUR::\n\n   $ git clone https://aur.archlinux.org/python-f90nml.git\n\
    \   $ cd python-f90nml\n   $ makepkg -sri\n\n``f90nml`` is currently not available on other Linux distributions.\n\nThe latest version of ``f90nml`` can be installed from source::\n\n   $ git clone\
    \ https://github.com/marshallward/f90nml.git\n   $ cd f90nml\n   $ python setup.py install\n\nUsers without install privileges can append the ``--user`` flag to\n``setup.py``::\n\n   $ python setup.py\
    \ install --user\n"
  doc_url: ''
  dev_url: ''

extra:
  recipe-maintainers: ''
